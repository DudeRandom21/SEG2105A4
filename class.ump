class Paramedic {
	String name;
}

class Pair {
	0..1 -- 2 Paramedic;
	0..1 -- 0..1 Ambulance;
}

class Ambulance {
	int odometer;
	String gpsCoordinates;

	int getTotalKM(Date aDate) {}

	void newIncident(String patienID, boolean isTransport) {}
	void needMaintenance() {}
	void repaired() {}
	void arriveAtDestination() {}

	state {
		Waiting {
			newIncident[!isTransport] -> DrivingToStart;
			newIncident[isTransport] -> TransportingPatient;
			needMaintenance -> OutOfService;
		}
		OutOfService {
			entry/{Facade.getInstance().notifyOutOfService(this);}
			repaired -> Waiting;
		}
		Active {
			DrivingToStart {}
			TransportingPatient {}
			arriveAtDestination -> Waiting;
		}
	}

	1 -- 1 Log;
}

class Log {
	void addEntry(String patienID) {}
	int totalKM(Date aDate) {}

	1 -- * LogEntry;
}

class LogEntry {
	Date date;
	String gpsCoordinates;
	int odometer;
	String patienID;
}

class WaitingLocation {
	String gpsCoordinates;
	0..1 -- * Ambulance;
}

class Facade {
	singleton;

	void addIncident(String patienID, boolean isTransport) {}
	void changeShift(Ambulance aAmbulance, Pair aPair) {}
	void notifyOutOfService(Ambulance aAmbulance) {}

	0..1 -> * Paramedic;
	0..1 -> * Pair;
	0..1 -> * Ambulance;
	0..1 -> * Log;
	0..1 -> * WaitingLocation;
}